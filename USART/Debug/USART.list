
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000031c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003dc  080003e4  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003dc  080003dc  000013e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003dc  080003dc  000013e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003dc  080003e4  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e0  080003e0  000013e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000086d  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000428  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  000020a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007e  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a3e3  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000013de  00000000  00000000  0000c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00036d26  00000000  00000000  0000d9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000446d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000168  00000000  00000000  00044718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00044880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080003c4 	.word	0x080003c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080003c4 	.word	0x080003c4

08000108 <send_stuffed_byte>:
 */

#include "bytestuff.h"
#include "crc.h"

void send_stuffed_byte(uint8_t byte, void (*send_func)(uint8_t)) {
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	6039      	str	r1, [r7, #0]
 8000112:	1dfb      	adds	r3, r7, #7
 8000114:	701a      	strb	r2, [r3, #0]
    if (byte == START_BYTE || byte == END_BYTE || byte == ESC_BYTE) {
 8000116:	1dfb      	adds	r3, r7, #7
 8000118:	781b      	ldrb	r3, [r3, #0]
 800011a:	2b7e      	cmp	r3, #126	@ 0x7e
 800011c:	d007      	beq.n	800012e <send_stuffed_byte+0x26>
 800011e:	1dfb      	adds	r3, r7, #7
 8000120:	781b      	ldrb	r3, [r3, #0]
 8000122:	2b7f      	cmp	r3, #127	@ 0x7f
 8000124:	d003      	beq.n	800012e <send_stuffed_byte+0x26>
 8000126:	1dfb      	adds	r3, r7, #7
 8000128:	781b      	ldrb	r3, [r3, #0]
 800012a:	2b7d      	cmp	r3, #125	@ 0x7d
 800012c:	d10b      	bne.n	8000146 <send_stuffed_byte+0x3e>
        send_func(ESC_BYTE);
 800012e:	683b      	ldr	r3, [r7, #0]
 8000130:	207d      	movs	r0, #125	@ 0x7d
 8000132:	4798      	blx	r3
        send_func(byte ^ 0x20);
 8000134:	1dfb      	adds	r3, r7, #7
 8000136:	781b      	ldrb	r3, [r3, #0]
 8000138:	2220      	movs	r2, #32
 800013a:	4053      	eors	r3, r2
 800013c:	b2da      	uxtb	r2, r3
 800013e:	683b      	ldr	r3, [r7, #0]
 8000140:	0010      	movs	r0, r2
 8000142:	4798      	blx	r3
 8000144:	e005      	b.n	8000152 <send_stuffed_byte+0x4a>
    } else {
        send_func(byte);
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781a      	ldrb	r2, [r3, #0]
 800014a:	683b      	ldr	r3, [r7, #0]
 800014c:	0010      	movs	r0, r2
 800014e:	4798      	blx	r3
    }
}
 8000150:	46c0      	nop			@ (mov r8, r8)
 8000152:	46c0      	nop			@ (mov r8, r8)
 8000154:	46bd      	mov	sp, r7
 8000156:	b002      	add	sp, #8
 8000158:	bd80      	pop	{r7, pc}

0800015a <send_packet>:

void send_packet(int16_t value, void (*send_func)(uint8_t)) {
 800015a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015c:	b085      	sub	sp, #20
 800015e:	af00      	add	r7, sp, #0
 8000160:	0002      	movs	r2, r0
 8000162:	6039      	str	r1, [r7, #0]
 8000164:	1dbb      	adds	r3, r7, #6
 8000166:	801a      	strh	r2, [r3, #0]
    uint8_t data[2] = { (value >> 8) & 0xFF, value & 0xFF };
 8000168:	1dbb      	adds	r3, r7, #6
 800016a:	2200      	movs	r2, #0
 800016c:	5e9b      	ldrsh	r3, [r3, r2]
 800016e:	121b      	asrs	r3, r3, #8
 8000170:	b21b      	sxth	r3, r3
 8000172:	b2da      	uxtb	r2, r3
 8000174:	210c      	movs	r1, #12
 8000176:	187b      	adds	r3, r7, r1
 8000178:	701a      	strb	r2, [r3, #0]
 800017a:	1dbb      	adds	r3, r7, #6
 800017c:	881b      	ldrh	r3, [r3, #0]
 800017e:	b2da      	uxtb	r2, r3
 8000180:	187b      	adds	r3, r7, r1
 8000182:	705a      	strb	r2, [r3, #1]
    uint8_t crc = calculate_crc(data, 2);
 8000184:	260f      	movs	r6, #15
 8000186:	19bc      	adds	r4, r7, r6
 8000188:	000d      	movs	r5, r1
 800018a:	187b      	adds	r3, r7, r1
 800018c:	2102      	movs	r1, #2
 800018e:	0018      	movs	r0, r3
 8000190:	f000 f821 	bl	80001d6 <calculate_crc>
 8000194:	0003      	movs	r3, r0
 8000196:	7023      	strb	r3, [r4, #0]

    send_func(START_BYTE);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	207e      	movs	r0, #126	@ 0x7e
 800019c:	4798      	blx	r3
    send_stuffed_byte(data[0], send_func);
 800019e:	197b      	adds	r3, r7, r5
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	683a      	ldr	r2, [r7, #0]
 80001a4:	0011      	movs	r1, r2
 80001a6:	0018      	movs	r0, r3
 80001a8:	f7ff ffae 	bl	8000108 <send_stuffed_byte>
    send_stuffed_byte(data[1], send_func);
 80001ac:	197b      	adds	r3, r7, r5
 80001ae:	785b      	ldrb	r3, [r3, #1]
 80001b0:	683a      	ldr	r2, [r7, #0]
 80001b2:	0011      	movs	r1, r2
 80001b4:	0018      	movs	r0, r3
 80001b6:	f7ff ffa7 	bl	8000108 <send_stuffed_byte>
    send_stuffed_byte(crc, send_func);
 80001ba:	683a      	ldr	r2, [r7, #0]
 80001bc:	19bb      	adds	r3, r7, r6
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	0011      	movs	r1, r2
 80001c2:	0018      	movs	r0, r3
 80001c4:	f7ff ffa0 	bl	8000108 <send_stuffed_byte>
    send_func(END_BYTE);
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	207f      	movs	r0, #127	@ 0x7f
 80001cc:	4798      	blx	r3
}
 80001ce:	46c0      	nop			@ (mov r8, r8)
 80001d0:	46bd      	mov	sp, r7
 80001d2:	b005      	add	sp, #20
 80001d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080001d6 <calculate_crc>:
 *      Author: praje
 */

#include "crc.h"

uint8_t calculate_crc(const uint8_t *data, uint8_t len) {
 80001d6:	b580      	push	{r7, lr}
 80001d8:	b084      	sub	sp, #16
 80001da:	af00      	add	r7, sp, #0
 80001dc:	6078      	str	r0, [r7, #4]
 80001de:	000a      	movs	r2, r1
 80001e0:	1cfb      	adds	r3, r7, #3
 80001e2:	701a      	strb	r2, [r3, #0]
    uint8_t crc = 0;
 80001e4:	230f      	movs	r3, #15
 80001e6:	18fb      	adds	r3, r7, r3
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < len; i++) {
 80001ec:	230e      	movs	r3, #14
 80001ee:	18fb      	adds	r3, r7, r3
 80001f0:	2200      	movs	r2, #0
 80001f2:	701a      	strb	r2, [r3, #0]
 80001f4:	e010      	b.n	8000218 <calculate_crc+0x42>
        crc ^= data[i];
 80001f6:	200e      	movs	r0, #14
 80001f8:	183b      	adds	r3, r7, r0
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	18d3      	adds	r3, r2, r3
 8000200:	7819      	ldrb	r1, [r3, #0]
 8000202:	220f      	movs	r2, #15
 8000204:	18bb      	adds	r3, r7, r2
 8000206:	18ba      	adds	r2, r7, r2
 8000208:	7812      	ldrb	r2, [r2, #0]
 800020a:	404a      	eors	r2, r1
 800020c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < len; i++) {
 800020e:	183b      	adds	r3, r7, r0
 8000210:	781a      	ldrb	r2, [r3, #0]
 8000212:	183b      	adds	r3, r7, r0
 8000214:	3201      	adds	r2, #1
 8000216:	701a      	strb	r2, [r3, #0]
 8000218:	230e      	movs	r3, #14
 800021a:	18fa      	adds	r2, r7, r3
 800021c:	1cfb      	adds	r3, r7, #3
 800021e:	7812      	ldrb	r2, [r2, #0]
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	429a      	cmp	r2, r3
 8000224:	d3e7      	bcc.n	80001f6 <calculate_crc+0x20>
    }
    return crc;
 8000226:	230f      	movs	r3, #15
 8000228:	18fb      	adds	r3, r7, r3
 800022a:	781b      	ldrb	r3, [r3, #0]
}
 800022c:	0018      	movs	r0, r3
 800022e:	46bd      	mov	sp, r7
 8000230:	b004      	add	sp, #16
 8000232:	bd80      	pop	{r7, pc}

08000234 <USART2_Init>:
#include "stm32f0xx.h"
#include "bytestuff.h"

void USART2_Init(void) {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
    RCC->AHBENR  |= RCC_AHBENR_GPIOAEN;
 8000238:	4b19      	ldr	r3, [pc, #100]	@ (80002a0 <USART2_Init+0x6c>)
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <USART2_Init+0x6c>)
 800023e:	2180      	movs	r1, #128	@ 0x80
 8000240:	0289      	lsls	r1, r1, #10
 8000242:	430a      	orrs	r2, r1
 8000244:	615a      	str	r2, [r3, #20]
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000246:	4b16      	ldr	r3, [pc, #88]	@ (80002a0 <USART2_Init+0x6c>)
 8000248:	69da      	ldr	r2, [r3, #28]
 800024a:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <USART2_Init+0x6c>)
 800024c:	2180      	movs	r1, #128	@ 0x80
 800024e:	0289      	lsls	r1, r1, #10
 8000250:	430a      	orrs	r2, r1
 8000252:	61da      	str	r2, [r3, #28]

    GPIOA->MODER &= ~((3 << (2 * 2)) | (3 << (2 * 3)));  // PA2/PA3
 8000254:	2390      	movs	r3, #144	@ 0x90
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	2390      	movs	r3, #144	@ 0x90
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	21f0      	movs	r1, #240	@ 0xf0
 8000260:	438a      	bics	r2, r1
 8000262:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  ((2 << (2 * 2)) | (2 << (2 * 3)));
 8000264:	2390      	movs	r3, #144	@ 0x90
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	2390      	movs	r3, #144	@ 0x90
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	21a0      	movs	r1, #160	@ 0xa0
 8000270:	430a      	orrs	r2, r1
 8000272:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0] |= (1 << (4 * 2)) | (1 << (4 * 3));
 8000274:	2390      	movs	r3, #144	@ 0x90
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	6a1a      	ldr	r2, [r3, #32]
 800027a:	2390      	movs	r3, #144	@ 0x90
 800027c:	05db      	lsls	r3, r3, #23
 800027e:	2188      	movs	r1, #136	@ 0x88
 8000280:	0149      	lsls	r1, r1, #5
 8000282:	430a      	orrs	r2, r1
 8000284:	621a      	str	r2, [r3, #32]

    USART2->BRR = 48000000 / 115200;
 8000286:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <USART2_Init+0x70>)
 8000288:	22d0      	movs	r2, #208	@ 0xd0
 800028a:	0052      	lsls	r2, r2, #1
 800028c:	60da      	str	r2, [r3, #12]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_UE;
 800028e:	4b05      	ldr	r3, [pc, #20]	@ (80002a4 <USART2_Init+0x70>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b04      	ldr	r3, [pc, #16]	@ (80002a4 <USART2_Init+0x70>)
 8000294:	2109      	movs	r1, #9
 8000296:	430a      	orrs	r2, r1
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40021000 	.word	0x40021000
 80002a4:	40004400 	.word	0x40004400

080002a8 <usart_send>:

void usart_send(uint8_t byte) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	0002      	movs	r2, r0
 80002b0:	1dfb      	adds	r3, r7, #7
 80002b2:	701a      	strb	r2, [r3, #0]
    while (!(USART2->ISR & USART_ISR_TXE));
 80002b4:	46c0      	nop			@ (mov r8, r8)
 80002b6:	4b07      	ldr	r3, [pc, #28]	@ (80002d4 <usart_send+0x2c>)
 80002b8:	69db      	ldr	r3, [r3, #28]
 80002ba:	2280      	movs	r2, #128	@ 0x80
 80002bc:	4013      	ands	r3, r2
 80002be:	d0fa      	beq.n	80002b6 <usart_send+0xe>
    USART2->TDR = byte;
 80002c0:	4a04      	ldr	r2, [pc, #16]	@ (80002d4 <usart_send+0x2c>)
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	8513      	strh	r3, [r2, #40]	@ 0x28
}
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	b002      	add	sp, #8
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	40004400 	.word	0x40004400

080002d8 <main>:

int main(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
    USART2_Init();
 80002de:	f7ff ffa9 	bl	8000234 <USART2_Init>
    while (1) {
        int16_t value = 1234;
 80002e2:	1dbb      	adds	r3, r7, #6
 80002e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <main+0x38>)
 80002e6:	801a      	strh	r2, [r3, #0]
        send_packet(value, usart_send);
 80002e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <main+0x3c>)
 80002ea:	1dbb      	adds	r3, r7, #6
 80002ec:	2100      	movs	r1, #0
 80002ee:	5e5b      	ldrsh	r3, [r3, r1]
 80002f0:	0011      	movs	r1, r2
 80002f2:	0018      	movs	r0, r3
 80002f4:	f7ff ff31 	bl	800015a <send_packet>
        for (volatile int i = 0; i < 800000; i++);  // ~1 sec delay
 80002f8:	2300      	movs	r3, #0
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	e002      	b.n	8000304 <main+0x2c>
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	603b      	str	r3, [r7, #0]
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	4a04      	ldr	r2, [pc, #16]	@ (8000318 <main+0x40>)
 8000308:	4293      	cmp	r3, r2
 800030a:	ddf8      	ble.n	80002fe <main+0x26>
    while (1) {
 800030c:	e7e9      	b.n	80002e2 <main+0xa>
 800030e:	46c0      	nop			@ (mov r8, r8)
 8000310:	000004d2 	.word	0x000004d2
 8000314:	080002a9 	.word	0x080002a9
 8000318:	000c34ff 	.word	0x000c34ff

0800031c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000320:	46c0      	nop			@ (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	@ (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800032c:	f7ff fff6 	bl	800031c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 f811 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ffbd 	bl	80002d8 <main>

0800035e <LoopForever>:

LoopForever:
    b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800036c:	080003e4 	.word	0x080003e4
  ldr r2, =_sbss
 8000370:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000374:	2000001c 	.word	0x2000001c

08000378 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC1_COMP_IRQHandler>
	...

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	2600      	movs	r6, #0
 8000380:	4c0c      	ldr	r4, [pc, #48]	@ (80003b4 <__libc_init_array+0x38>)
 8000382:	4d0d      	ldr	r5, [pc, #52]	@ (80003b8 <__libc_init_array+0x3c>)
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	10a4      	asrs	r4, r4, #2
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	2600      	movs	r6, #0
 800038e:	f000 f819 	bl	80003c4 <_init>
 8000392:	4c0a      	ldr	r4, [pc, #40]	@ (80003bc <__libc_init_array+0x40>)
 8000394:	4d0a      	ldr	r5, [pc, #40]	@ (80003c0 <__libc_init_array+0x44>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	00b3      	lsls	r3, r6, #2
 80003a2:	58eb      	ldr	r3, [r5, r3]
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	00b3      	lsls	r3, r6, #2
 80003ac:	58eb      	ldr	r3, [r5, r3]
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	080003dc 	.word	0x080003dc
 80003b8:	080003dc 	.word	0x080003dc
 80003bc:	080003e0 	.word	0x080003e0
 80003c0:	080003dc 	.word	0x080003dc

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	46c0      	nop			@ (mov r8, r8)
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
